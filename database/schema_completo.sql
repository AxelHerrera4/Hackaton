-- Script SQL completo para PostgreSQL - Base de datos "favorita"
-- Ejecutar en pgAdmin Query Tool

-- ============================================================
-- PASO 1: Eliminar todas las tablas existentes
-- ============================================================
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO public;

-- ============================================================
-- PASO 2: Crear tablas principales
-- ============================================================

-- Tabla EJES
CREATE TABLE EJES (
   EJES_ID SERIAL PRIMARY KEY,
   EJES_NOMBRE VARCHAR(124) NOT NULL,
   EJES_DESCRIPCION VARCHAR(124) NOT NULL
);

CREATE UNIQUE INDEX EJES_PK ON EJES (EJES_ID);

-- Tabla INDICADORES
CREATE TABLE INDICADORES (
   INDICADORES_ID SERIAL PRIMARY KEY,
   EJES_ID INTEGER NOT NULL,
   INDICADORES_NOMBRE VARCHAR(124) NOT NULL,
   INDICADORES_DESCRIPCION VARCHAR(124) NOT NULL,
   INDICADORES_VALOR VARCHAR(124) NOT NULL,
   CONSTRAINT FK_INDICADORES_EJES FOREIGN KEY (EJES_ID) 
      REFERENCES EJES (EJES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX INDICADORES_PK ON INDICADORES (INDICADORES_ID);
CREATE INDEX PRESENTA_FK ON INDICADORES (EJES_ID);

-- Tabla USUARIO (CON USUARIO_ROLE)
CREATE TABLE USUARIO (
   USUARIO_ID SERIAL PRIMARY KEY,
   USUARIO_NOMBREONG VARCHAR(124) NOT NULL,
   USUARIO_USER VARCHAR(124) NOT NULL UNIQUE,
   USUARIO_CONTRASENA VARCHAR(255) NOT NULL,
   USUARIO_ROLE VARCHAR(32) NOT NULL DEFAULT 'ong',
   USUARI_DESCRIPCION VARCHAR(124) NOT NULL
);

CREATE UNIQUE INDEX USUARIO_PK ON USUARIO (USUARIO_ID);

-- Tabla REPORTEPROYECTO
CREATE TABLE REPORTEPROYECTO (
   REPORTEPROYECTO_ID SERIAL PRIMARY KEY,
   USUARIO_ID INTEGER NOT NULL,
   REPORTEPROYECTO_NOMBRE VARCHAR(124) NOT NULL,
   REPORTEPROYECTO_FECHAINICIO DATE NOT NULL,
   REPORTEPROYECTO_FECHAFIN DATE NOT NULL,
   REPORTEPROYECTO_PERIODOSUBIRREPORTES VARCHAR(124) NOT NULL,
   REPORTEPROYECTO_ACCIONESDESTACADAS VARCHAR(124) NOT NULL,
   REPORTEPROYECTO_PRIMERHITO VARCHAR(124) NOT NULL,
   REPORTEPROYECTO_SEGUNDOHITO VARCHAR(124) NOT NULL,
   REPORTEPROYECTO_TERCERHITO VARCHAR(124) NOT NULL,
   REPORTEPROYECTO_NOMBREHITO VARCHAR(124) NOT NULL,
   REPORTEPROYECTO_LUGAR VARCHAR(128) NOT NULL,
   REPORTEPROYECTO_DESCRIPCION VARCHAR(128) NOT NULL,
   REPORTEPROYECTO_INDICADORLARGOPLAZO VARCHAR(128) NOT NULL,
   REPORTEPROYECTO_MATERIALAUDIOVISUAL VARCHAR(128) NOT NULL,
   REPORTEPROYECTO_INDICADORPREVENCION VARCHAR(128) NOT NULL,
   REPORTEPROYECTO_ESTADO VARCHAR(128) NOT NULL,
   CONSTRAINT FK_REPORTEPROYECTO_USUARIO FOREIGN KEY (USUARIO_ID) 
      REFERENCES USUARIO (USUARIO_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX REPORTEPROYECTO_PK ON REPORTEPROYECTO (REPORTEPROYECTO_ID);
CREATE INDEX GENERA_FK ON REPORTEPROYECTO (USUARIO_ID);

-- Tabla TIENE (relación muchos a muchos)
CREATE TABLE TIENE (
   REPORTEPROYECTO_ID INTEGER NOT NULL,
   EJES_ID INTEGER NOT NULL,
   PRIMARY KEY (REPORTEPROYECTO_ID, EJES_ID),
   CONSTRAINT FK_TIENE_REPORTEPROYECTO FOREIGN KEY (REPORTEPROYECTO_ID) 
      REFERENCES REPORTEPROYECTO (REPORTEPROYECTO_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
   CONSTRAINT FK_TIENE_EJES FOREIGN KEY (EJES_ID) 
      REFERENCES EJES (EJES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX TIENE_PK ON TIENE (REPORTEPROYECTO_ID, EJES_ID);
CREATE INDEX TIENE_FK ON TIENE (REPORTEPROYECTO_ID);
CREATE INDEX TIENE2_FK ON TIENE (EJES_ID);

-- ============================================================
-- PASO 3: Tablas adicionales (Plantillas y Respuestas)
-- ============================================================

-- Tabla PLANTILLA_REPORTE
CREATE TABLE PLANTILLA_REPORTE (
   PLANTILLA_ID SERIAL PRIMARY KEY,
   USUARIO_ID INTEGER NOT NULL,
   PLANTILLA_NOMBRE VARCHAR(124) NOT NULL,
   PLANTILLA_FECHAINICIO DATE NOT NULL,
   PLANTILLA_FECHAFIN DATE NOT NULL,
   PLANTILLA_PERIODOSUBIRREPORTES VARCHAR(124) NOT NULL,
   PLANTILLA_DESCRIPCION VARCHAR(256) NOT NULL,
   CONSTRAINT FK_PLANTILLA_USUARIO FOREIGN KEY (USUARIO_ID) 
      REFERENCES USUARIO (USUARIO_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX PLANTILLA_REPORTE_PK ON PLANTILLA_REPORTE (PLANTILLA_ID);
CREATE INDEX PLANTILLA_GENERA_FK ON PLANTILLA_REPORTE (USUARIO_ID);

-- Tabla PLANTILLA_TIENE
CREATE TABLE PLANTILLA_TIENE (
  PLANTILLA_ID INTEGER NOT NULL,
  EJES_ID INTEGER NOT NULL,
  PRIMARY KEY (PLANTILLA_ID, EJES_ID),
  CONSTRAINT FK_PLANTILLA_TIENE_PLANTILLA FOREIGN KEY (PLANTILLA_ID) 
     REFERENCES PLANTILLA_REPORTE (PLANTILLA_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_PLANTILLA_TIENE_EJES FOREIGN KEY (EJES_ID) 
     REFERENCES EJES (EJES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX PLANTILLA_TIENE_PK ON PLANTILLA_TIENE (PLANTILLA_ID, EJES_ID);
CREATE INDEX PLANTILLA_TIENE_EJES_FK ON PLANTILLA_TIENE (EJES_ID);

-- Tabla PLANTILLA_INDICADORES
CREATE TABLE PLANTILLA_INDICADORES (
  PLANTILLA_ID INTEGER NOT NULL,
  EJES_ID INTEGER NOT NULL,
  INDICADORES_ID INTEGER NOT NULL,
  PRIMARY KEY (PLANTILLA_ID, INDICADORES_ID),
  CONSTRAINT FK_PLANTILLA_INDIC_PLANTILLA FOREIGN KEY (PLANTILLA_ID) 
     REFERENCES PLANTILLA_REPORTE (PLANTILLA_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_PLANTILLA_INDIC_EJES FOREIGN KEY (EJES_ID) 
     REFERENCES EJES (EJES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_PLANTILLA_INDIC_INDIC FOREIGN KEY (INDICADORES_ID) 
     REFERENCES INDICADORES (INDICADORES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX PLANTILLA_INDICADORES_PK ON PLANTILLA_INDICADORES (PLANTILLA_ID, INDICADORES_ID);

-- Tabla REPORTE_INDICADORES
CREATE TABLE REPORTE_INDICADORES (
  REPORTEPROYECTO_ID INTEGER NOT NULL,
  EJES_ID INTEGER NOT NULL,
  INDICADORES_ID INTEGER NOT NULL,
  PRIMARY KEY (REPORTEPROYECTO_ID, INDICADORES_ID),
  CONSTRAINT FK_REPORTE_IND_REPORTE FOREIGN KEY (REPORTEPROYECTO_ID) 
     REFERENCES REPORTEPROYECTO (REPORTEPROYECTO_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_REPORTE_IND_EJES FOREIGN KEY (EJES_ID) 
     REFERENCES EJES (EJES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_REPORTE_IND_INDIC FOREIGN KEY (INDICADORES_ID) 
     REFERENCES INDICADORES (INDICADORES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX REPORTE_INDICADORES_PK ON REPORTE_INDICADORES (REPORTEPROYECTO_ID, INDICADORES_ID);

-- Tabla REPORTE_RESPUESTAS
CREATE TABLE REPORTE_RESPUESTAS (
  RESPUESTA_ID SERIAL PRIMARY KEY,
  REPORTEPROYECTO_ID INTEGER NOT NULL,
  USUARIO_ID INTEGER NOT NULL,
  EJES_ID INTEGER NOT NULL,
  INDICADORES_ID INTEGER NOT NULL,
  RESPUESTA_VALOR VARCHAR(512) NOT NULL,
  RESPUESTA_FECHA TIMESTAMP NOT NULL DEFAULT NOW(),
  CONSTRAINT FK_RESPUESTA_REPORTE FOREIGN KEY (REPORTEPROYECTO_ID) 
     REFERENCES REPORTEPROYECTO (REPORTEPROYECTO_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_RESPUESTA_USUARIO FOREIGN KEY (USUARIO_ID) 
     REFERENCES USUARIO (USUARIO_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_RESPUESTA_EJES FOREIGN KEY (EJES_ID) 
     REFERENCES EJES (EJES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  CONSTRAINT FK_RESPUESTA_INDICADORES FOREIGN KEY (INDICADORES_ID) 
     REFERENCES INDICADORES (INDICADORES_ID) ON DELETE RESTRICT ON UPDATE RESTRICT
);

CREATE UNIQUE INDEX REPORTE_RESPUESTAS_PK ON REPORTE_RESPUESTAS (RESPUESTA_ID);

-- ============================================================
-- PASO 4: Insertar datos iniciales
-- ============================================================

-- Insertar EJES
INSERT INTO EJES (EJES_ID, EJES_NOMBRE, EJES_DESCRIPCION) VALUES 
(1, 'Nutrición', 'Eje enfocado en mejorar la nutrición y seguridad alimentaria'),
(2, 'Educación', 'Eje centrado en mejorar el acceso y calidad educativa'),
(3, 'Emprendimiento', 'Eje destinado a fomentar el emprendimiento y desarrollo económico'),
(4, 'Medio Ambiente', 'Eje enfocado en la conservación y protección ambiental'),
(5, 'Equidad de Género', 'Eje centrado en promover la equidad e inclusión de género'),
(7, 'Educación - Equidad de Género', 'Eje enfocado en promover la formación educativa con enfoque de equidad e inclusión de género');

-- Insertar USUARIOS (con USUARIO_ROLE y contraseñas hasheadas con bcrypt)
-- Contraseña para todos: "Admin@12345"
INSERT INTO USUARIO (USUARIO_ID, USUARIO_NOMBREONG, USUARIO_USER, USUARIO_CONTRASENA, USUARIO_ROLE, USUARI_DESCRIPCION) VALUES
(1, 'Administrador Sistema', 'admin@favorita.com', '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', 'Administrador del sistema'),
(2, 'Fundación Esperanza', 'fundacion@esperanza.org', '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'ong', 'Fundación dedicada a la educación'),
(3, 'Fundación Verde', 'contacto@verde.org', '$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'ong', 'Fundación enfocada en medio ambiente');

-- Insertar INDICADORES
INSERT INTO INDICADORES (INDICADORES_ID, EJES_ID, INDICADORES_NOMBRE, INDICADORES_DESCRIPCION, INDICADORES_VALOR) VALUES 
(1, 2, 'Escuelas apoyadas (#)', 'Número total de escuelas que reciben apoyo del programa educativo', '25'),
(2, 5, 'Mujeres apoyadas FF (estudiantes) #', 'Cantidad de mujeres estudiantes beneficiadas con apoyo del programa de Equidad de Género', '150'),
(3, 1, 'Personas con alimentos, cuidado y/o guía en nutrición (#)', 'Número de personas beneficiadas con apoyo alimentario, orientación o cuidado nutricional', '300'),
(4, 5, 'Mujeres apoyadas FF (#)', 'Cantidad total de mujeres beneficiadas a través de los programas de equidad e inclusión', '200'),
(5, 2, 'Estudiantes vulnerables con capacitaciones puntuales (#)', 'Número de estudiantes en situación vulnerable que participan en capacitaciones específicas', '75'),
(15, 3, 'Educación en emprendimiento. Personas capacitadas (#)', 'Número de personas que participaron en capacitaciones o talleres de emprendimiento', '45'),
(20, 4, 'CO2 evitadas (tn)', 'Toneladas de CO2 evitadas mediante acciones de mitigación ambiental', '12.5'),
(24, 4, 'Recuperación de residuos (Tons. Met)', 'Cantidad de residuos recuperados en toneladas métricas a través de programas ambientales', '8.3');

-- Insertar REPORTEPROYECTO
INSERT INTO REPORTEPROYECTO (REPORTEPROYECTO_ID, USUARIO_ID, REPORTEPROYECTO_NOMBRE, REPORTEPROYECTO_FECHAINICIO, REPORTEPROYECTO_FECHAFIN, REPORTEPROYECTO_PERIODOSUBIRREPORTES, REPORTEPROYECTO_ACCIONESDESTACADAS, REPORTEPROYECTO_PRIMERHITO, REPORTEPROYECTO_SEGUNDOHITO, REPORTEPROYECTO_TERCERHITO, REPORTEPROYECTO_NOMBREHITO, REPORTEPROYECTO_LUGAR, REPORTEPROYECTO_DESCRIPCION, REPORTEPROYECTO_INDICADORLARGOPLAZO, REPORTEPROYECTO_MATERIALAUDIOVISUAL, REPORTEPROYECTO_INDICADORPREVENCION, REPORTEPROYECTO_ESTADO) VALUES
(1, 2, 'Programa Educativo Rural 2024', '2024-01-15', '2024-12-15', 'Mensual', 'Implementación de laboratorios', 'Selección escuelas', 'Capacitación docentes', 'Implementación lab', 'Evaluación impacto', 'Zona rural Pichincha', 'Proyecto educativo rural', 'Mejora 30% calificaciones', 'Videos educativos', 'Reducción deserción 15%', 'En ejecución'),
(2, 3, 'Proyecto Reforestación Urbana', '2024-03-01', '2024-11-30', 'Trimestral', 'Plantación 1000 árboles', 'Identificación áreas', 'Adquisición plantas', 'Jornadas plantación', 'Seguimiento cuidado', 'Parques urbanos Quito', 'Reforestación urbana', 'Incremento 20% área verde', 'Documentales', 'Reducción 500tn CO2', 'En planificación');

-- Insertar TIENE
INSERT INTO TIENE (REPORTEPROYECTO_ID, EJES_ID) VALUES
(1, 2),
(1, 5),
(2, 4);

-- ============================================================
-- PASO 5: Actualizar secuencias
-- ============================================================
SELECT setval('ejes_ejes_id_seq', (SELECT MAX(ejes_id) FROM ejes));
SELECT setval('usuario_usuario_id_seq', (SELECT MAX(usuario_id) FROM usuario));
SELECT setval('indicadores_indicadores_id_seq', (SELECT MAX(indicadores_id) FROM indicadores));
SELECT setval('reporteproyecto_reporteproyecto_id_seq', (SELECT MAX(reporteproyecto_id) FROM reporteproyecto));

-- ============================================================
-- PASO 6: Verificar datos creados
-- ============================================================
SELECT 'EJES' as tabla, count(*) as total FROM EJES
UNION ALL
SELECT 'INDICADORES' as tabla, count(*) as total FROM INDICADORES
UNION ALL
SELECT 'USUARIO' as tabla, count(*) as total FROM USUARIO
UNION ALL
SELECT 'REPORTEPROYECTO' as tabla, count(*) as total FROM REPORTEPROYECTO
UNION ALL
SELECT 'TIENE' as tabla, count(*) as total FROM TIENE;

-- Verificar usuarios creados
SELECT USUARIO_ID, USUARIO_USER, USUARIO_ROLE, USUARIO_NOMBREONG FROM USUARIO;
